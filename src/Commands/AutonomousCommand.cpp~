// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"
#include "../Commands/lFirstToteLevel.h"
#include "../Commands/lPIDFloor.h"
#define SEC 50


AutonomousCommand::AutonomousCommand() {
	counter = 0;
	turned = false;
	turnedCounter = 0;
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	Robot::driveTrain->gyro->Reset();
	RobotMap::clamppiston->Set(false);
	counter = 0;
	turnedCounter = 0;
	turned = false;
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {

	//CLAMP THE TOTE
	if(turnedCounter == 0 && counter <= SEC*1)
	{
		RobotMap::clamppiston->Set(true);
	}

	//MOVE TOTE UP 7 INCHES for 2 seconds after the tote is clamped
	else if(turnedCounter == 0 && counter <= SEC*2)
	{
		(new lFirstToteLevel)->Start();
	}

	//MOVE BACK for 1 second after the tote moves up
	else if(turnedCounter == 0 && counter <= SEC*4)
	{
		Robot::driveTrain->mecanum->MecanumDrive_Cartesian(0.0,0.25,0.0);
	}

	else if(turnedCounter == 0 && counter <= SEC*5)
	{
		(new lPIDFloor)->Start();
	}
	else if(turnedCounter == 0 && counter <= SEC*7)
	{
		RobotMap::clamppiston->Set(false);
	}
	else if(turnedCounter == 0 && counter <= SEC*8)
	{
		Robot::driveTrain->mecanum->MecanumDrive_Cartesian(0.0,-.25,0.0);
	}
	/*//STOP AND TURN 90 DEGREES
	else if(!turned)
	{
		turned = Robot::driveTrain->TurnTo(-90);
		//if(turned)
		//	turnedCounter ++;
		//counter = 0;
	}
	//MOVE FORWARD
	else if(turnedCounter == 1 && turned == true  && counter <= SEC*3 )
	{
		Robot::driveTrain->mecanum->MecanumDrive_Cartesian(0.0,-0.1,0.0);
	}

	//STOP AND ROTATE ANOTHER 90 DEGREES
	else if(turnedCounter == 1 && turned == true && counter <= SEC*3.5)
	{
		turned = false;
		Robot::driveTrain->gyro->Reset();
	}

	//DROP TOTE
	else if(turnedCounter == 2 && turned == true && counter <= SEC*1)
	{
		Robot::driveTrain->mecanum->MecanumDrive_Cartesian(0.0,0.0,0.0);
		RobotMap::clamppiston->Set(true);
	}

	//BACK UP
	else if(turnedCounter == 2 && turned == true && counter <= SEC*3)
	{
		Robot::driveTrain->mecanum->MecanumDrive_Cartesian(0.0,0.1,0.0);
	}

	//STOP
	else
	{
		Robot::driveTrain->mecanum->MecanumDrive_Cartesian(0.0,0.0,0.0);
	}*/
	counter ++;
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
