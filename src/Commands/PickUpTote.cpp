// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "PickUpTote.h"
#include "../Commands/lFirstToteLevel.h"
PickUpTote::PickUpTote() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::liftR);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	low = new lFirstToteLevel();
	endCount = 0;
}

// Called just before this Command runs the first time
void PickUpTote::Initialize() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
	Robot::liftR->Enable();
	Robot::liftR->SetSetpoint(12.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE
	//First the clamp moves to the first tote level so it can later drop the tote it has on the tote
	//it's  about to pick up
	endCount = 0;
}

// Called repeatedly when this Command is scheduled to run
void PickUpTote::Execute() {
	printf("Running: %f\n", Robot::liftR->PIDGet());
	if(Robot::liftR->OnTarget())
	{
		if(endCount == 0)
		{
			Robot::clamp->piston->Set(true); // Release the clamp so that the tote it is holding drops on the stack
			Robot::liftR->SetSetpoint(0.0);// move to floor level so it picks up the next tote
			endCount++; //adds to end count so that it won't run this again
		}
		else//runs this part once endCount is more than 0
		{
			printf("END: %i", endCount);
			endCount++;	//starts counting the delay once the Setpoint is reached
		}
	}

}

// Make this return true when this Command no longer needs to run execute()
bool PickUpTote::IsFinished() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
	//return Robot::liftR->OnTarget();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
	if(endCount == 2)	//if half a second has gone by since it reached it's spot then go to END() function
		return true;
	else
		return false;
}

// Called once after isFinished returns true
void PickUpTote::End() {
	Robot::clamp->piston->Set(false);
	printf("End Tote Pick Up");
	low->Start();	//starts the floor command to pick up next tote
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PickUpTote::Interrupted() {

}
